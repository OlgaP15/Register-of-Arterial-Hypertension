// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://localhost:3001/patients';
const BMI_CATEGORIES = {
  underweight: { max: 18.5, class: 'underweight', label: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞', icon: '‚ö†Ô∏è' },
  normal: { max: 25, class: 'normal', label: '–ù–æ—Ä–º–∞', icon: '‚úÖ' },
  overweight: { max: 30, class: 'overweight', label: '–ò–∑–±—ã—Ç–æ–∫ –≤–µ—Å–∞', icon: '‚ö†Ô∏è' },
  obese: { max: Infinity, class: 'obese', label: '–û–∂–∏—Ä–µ–Ω–∏–µ', icon: '‚ùå' }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
  form: document.getElementById('patient-form'),
  table: document.getElementById('patients-table'),
  refreshBtn: document.getElementById('refresh-btn'),
  submitBtn: document.getElementById('submit-btn'),
  cancelEditBtn: document.getElementById('cancel-edit'),
  inputs: {
    name: document.getElementById('patient-name'),
    birthdate: document.getElementById('patient-birthdate'),
    height: document.getElementById('patient-height'),
    weight: document.getElementById('patient-weight')
  },
  errors: {
    name: document.getElementById('name-error'),
    birthdate: document.getElementById('birthdate-error'),
    height: document.getElementById('height-error'),
    weight: document.getElementById('weight-error')
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', initApp);

function initApp() {
  setupEventListeners();
  loadPatients();
  validateForm();
}

function setupEventListeners() {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
  Object.values(elements.inputs).forEach(input => {
    input.addEventListener('input', validateForm);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º—ã
  elements.form.addEventListener('submit', handleFormSubmit);
  elements.cancelEditBtn.addEventListener('click', cancelEdit);
  elements.refreshBtn.addEventListener('click', loadPatients);
  
  // –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
  document.getElementById('print-btn').addEventListener('click', printData);
  document.getElementById('export-excel-btn').addEventListener('click', exportToExcel);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm() {
  let isValid = true;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π
  if (!elements.inputs.name.value.trim()) {
    elements.errors.name.textContent = '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞';
    isValid = false;
  } else {
    elements.errors.name.textContent = '';
  }
  
  if (!elements.inputs.birthdate.value) {
    elements.errors.birthdate.textContent = '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è';
    isValid = false;
  } else {
    elements.errors.birthdate.textContent = '';
  }
  
  if (!elements.inputs.height.value || elements.inputs.height.value < 100 || elements.inputs.height.value > 250) {
    elements.errors.height.textContent = '–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º';
    isValid = false;
  } else {
    elements.errors.height.textContent = '';
  }
  
  if (!elements.inputs.weight.value || elements.inputs.weight.value < 30 || elements.inputs.weight.value > 300) {
    elements.errors.weight.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥';
    isValid = false;
  } else {
    elements.errors.weight.textContent = '';
  }
  
  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
  elements.submitBtn.disabled = !isValid;
  
  return isValid;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
async function loadPatients() {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    const patients = await response.json();
    renderPatients(patients);
  } catch (error) {
    showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
  }
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
function renderPatients(patients) {
  const tbody = elements.table.querySelector('tbody');
  tbody.innerHTML = patients.map(patient => {
    const bmiInfo = getBMIInfo(patient.height, patient.weight);
    return `
      <tr>
        <td>${patient.name || '<span class="missing-data">–Ω–µ —É–∫–∞–∑–∞–Ω–æ</span>'}</td>
        <td>${formatDate(patient.birthDate) || '<span class="missing-data">–Ω–µ —É–∫–∞–∑–∞–Ω–∞</span>'}</td>
        <td>${calculateBMI(patient.height, patient.weight)}</td>
        <td class="${bmiInfo.class}">
          <span class="status-icon">${bmiInfo.icon}</span> ${bmiInfo.label}
        </td>
        <td>
          <button onclick="editPatient(${patient.id})" class="edit-btn">‚úèÔ∏è</button>
          <button onclick="deletePatient(${patient.id})" class="danger-btn">üóëÔ∏è</button>
        </td>
      </tr>
    `;
  }).join('');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
async function handleFormSubmit(e) {
  e.preventDefault();
  
  if (!validateForm()) return;
  
  const patient = {
    name: elements.inputs.name.value.trim(),
    birthDate: elements.inputs.birthdate.value,
    height: parseFloat(elements.inputs.height.value),
    weight: parseFloat(elements.inputs.weight.value)
  };

  try {
    const isEditing = elements.form.dataset.editingId;
    const url = isEditing ? `${API_URL}/${elements.form.dataset.editingId}` : API_URL;
    const method = isEditing ? 'PUT' : 'POST';

    const response = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(patient)
    });

    if (!response.ok) throw new Error(isEditing ? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    
    resetForm();
    await loadPatients();
    showSuccess(isEditing ? '–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' : '–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
  } catch (error) {
    showError(error.message);
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
async function editPatient(id) {
  try {
    const response = await fetch(`${API_URL}/${id}`);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞');
    
    const patient = await response.json();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    elements.inputs.name.value = patient.name || '';
    elements.inputs.birthdate.value = patient.birthDate || '';
    elements.inputs.height.value = patient.height || '';
    elements.inputs.weight.value = patient.weight || '';
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elements.form.dataset.editingId = id;
    elements.cancelEditBtn.classList.remove('hidden');
    elements.submitBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ
    elements.form.scrollIntoView({ behavior: 'smooth' });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateForm();
  } catch (error) {
    showError(error.message);
  }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit() {
  resetForm();
  showSuccess('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
  elements.form.reset();
  delete elements.form.dataset.editingId;
  elements.cancelEditBtn.classList.add('hidden');
  elements.submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
  validateForm();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
async function deletePatient(id) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞?')) return;
  
  try {
    const response = await fetch(`${API_URL}/${id}`, { method: 'DELETE' });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    
    await loadPatients();
    showSuccess('–ü–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    showError(error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateBMI(height, weight) {
  if (!height || !weight) return '-';
  return (weight / ((height / 100) ** 2).toFixed(1);
}

function getBMIInfo(height, weight) {
  if (!height || !weight) return { class: '', label: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', icon: '‚ùì' };
  
  const bmi = weight / ((height / 100) ** 2);
  for (const [key, value] of Object.entries(BMI_CATEGORIES)) {
    if (bmi < value.max) return value;
  }
  return BMI_CATEGORIES.obese;
}

function formatDate(dateString) {
  if (!dateString) return null;
  const options = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString('ru-RU', options);
}

function showError(message) {
  const alert = document.createElement('div');
  alert.className = 'alert error';
  alert.innerHTML = `‚ùå ${message}`;
  document.body.prepend(alert);
  setTimeout(() => alert.remove(), 5000);
}

function showSuccess(message) {
  const alert = document.createElement('div');
  alert.className = 'alert success';
  alert.innerHTML = `‚úÖ ${message}`;
  document.body.prepend(alert);
  setTimeout(() => alert.remove(), 3000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
async function exportToExcel() {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    
    const patients = await response.json();
    const data = patients.map(patient => {
      const bmiInfo = getBMIInfo(patient.height, patient.weight);
      return {
        '–§–ò–û': patient.name,
        '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è': formatDate(patient.birthDate),
        '–†–æ—Å—Ç (—Å–º)': patient.height,
        '–í–µ—Å (–∫–≥)': patient.weight,
        '–ò–ú–¢': calculateBMI(patient.height, patient.weight),
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ò–ú–¢': bmiInfo.label,
        '–°—Ç–∞—Ç—É—Å': bmiInfo.icon
      };
    });

    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "–ü–∞—Ü–∏–µ–Ω—Ç—ã");
    XLSX.writeFile(wb, "–ø–∞—Ü–∏–µ–Ω—Ç—ã_–ê–ì.xlsx");
    showSuccess('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel');
  } catch (error) {
    showError(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`);
  }
}

function printData() {
  window.print();
}